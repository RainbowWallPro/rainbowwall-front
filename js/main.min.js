const Web3Modal = window.Web3Modal.default;

const WalletConnectProvider = window.WalletConnectProvider.default;

const ipfs = window.IpfsHttpClient.create({
  host: "ipfs.infura.io",
  port: "5001",
});

const TYPE = {
  TEXT: "TEXT",
};

let explorerUrl;

let contract;

async function initWeb3() {
  const providerOptions = {
    walletconnect: {
      package: WalletConnectProvider,
      options: {
        // Mikko's test key - don't copy as your mileage may vary
        infuraId: "9aa3d95b3bc440fa88ea12eaa4456161",
      },
    },
  };
  web3Modal = new Web3Modal({
    cacheProvider: false, // optional
    providerOptions, // required
    disableInjectedProvider: false, // optional. For MetaMask / Brave / Opera.
  });
  try {
    provider = await web3Modal.connect();
    provider.enable();
    flush();
  } catch (e) {
    console.log("Could not get a wallet connection", e);
    $(".network").html("Invalid Network");
    $(".network").css({
      background: "red",
      "-webkit-text-fill-color": "transparent",
      "-webkit-background-clip": "text",
    });
    return;
  }
  // Subscribe to accounts change
  provider.on("accountsChanged", async (accounts) => {
    flush();
  });
  // Subscribe to chainId change
  provider.on("chainChanged", async (chainId) => {
    flush();
  });
  // Subscribe to networkId change
  provider.on("networkChanged", async (networkId) => {
    flush();
  });
}

async function flush() {
  web3 = new Web3(provider);
  chainId = await web3.eth.getChainId();
  console.log("chainId:" + chainId);

  if (chainId == 1) {
    // const contractAddress = "0x766b39d4b747ddcf78eab0daa447e9650e2c239d";
    // contract = new web3.eth.Contract(ABI, contractAddress);
    $(".network").html("Ethereum Mainnet");
    $(".network").css({
      background: "linear-gradient(90deg, blue, red)",
      "-webkit-text-fill-color": "transparent",
      "-webkit-background-clip": "text",
    });
    explorerUrl = "https://etherscan.io";
    //   $("#network").html("Ethereum Mainnet");
  } else if (chainId == 4) {
    // const contractAddress = "0x766b39d4b747ddcf78eab0daa447e9650e2c239d";
    // contract = new web3.eth.Contract(ABI, contractAddress);
    explorerUrl = "https://rinkeby.etherscan.io";

    $(".network").html("Ethereum Rinkeby");
    $(".network").css({
      background: "linear-gradient(90deg, yellow, blue)",
      "-webkit-text-fill-color": "transparent",
      "-webkit-background-clip": "text",
    });
  } else if (chainId == 56) {
    // const contractAddress = "0x766b39d4b747ddcf78eab0daa447e9650e2c239d";
    // contract = new web3.eth.Contract(ABI, contractAddress);
    explorerUrl = "https://bscscan.com";

    $(".network").html("Binance Smart Chain Mainnet");
    $(".network").css({
      background: "linear-gradient(90deg, gold, red)",
      "-webkit-text-fill-color": "transparent",
      "-webkit-background-clip": "text",
    });
  }else {
    $(".network").html("Invalid Network");
    $(".network").css({
      background: "red",
      "-webkit-text-fill-color": "transparent",
      "-webkit-background-clip": "text",
    });
  }
  const accounts = await web3.eth.getAccounts();
  selectedAccount = accounts[0];
  let ensName = await getEnsName(selectedAccount);
  console.log(selectedAccount);
  $(".account").html(ensName)
}

async function getEnsName(account) {
  const ens = new ethers.providers.Web3Provider(web3.currentProvider);
  try {
    let ensName = await ens.lookupAddress(account);
    if (ensName == null) return account;
    return ensName;
  } catch (e) {
    return account;
  }
}

async function uploadToIpfs(content) {
  let res = await ipfs.add(content);
  console.log(res);
  return res["cid"];
}

async function catFromIpfs(cid) {
  let contents = "";
  let source = ipfs.cat(cid);
  const decoder = new TextDecoder("utf-8");

  for await (const chunk of source) {
    contents += decoder.decode(chunk, {
      stream: true,
    });
  }

  contents += decoder.decode();
  return contents;
}

function constructMetadata(content, image, type) {
  json = {
    name: "RainbowWall",
    description: content,
    image: constructImage(content, image, type),
  };
  return JSON.stringify(json);
}

function constructImage(content, image, type) {
  let data;
  if (type == TYPE.TEXT) {
    let list = content.replace("â†µ", "\n").split("\n");

    let text = "";
    for (const i in list) {
      text =
        text +
        '<text x="10" y="' +
        20 * (parseInt(i) + 1) +
        '" fill="url(#grad1)">' +
        list[i] +
        "</text>";
    }
    let svg =
      '<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMinYMin meet" viewBox="0 0 1000 1000"><linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%"><stop offset="0%" style="stop-color:red;stop-opacity:1" /><stop offset="100%" style="stop-color:blue;stop-opacity:1" /></linearGradient>' +
      text +
      "</svg>";

    data = "data:image/svg+xml;base64," + Base64.encode(svg);
  } else if (type == TYPE.IMAGE) {
  }
  return data;
}

async function paste() {
  let content = $(".text-content").val();
  $(".pasteButton").attr("disabled", "true");
  $(".pasteButton").html("WAITING...");
  let metadata = constructMetadata(content, "", TYPE.TEXT);
  let cid = await uploadToIpfs(metadata);
  let pasteContent = "ipfs://" + cid.toString();
  $(".pasteButton").html('<span class="text-rainbow">PASTE</span>');
  $(".pasteButton").removeAttr("disabled");
}

function init() {
  // Toggle the side navigation
  $("#sidebarToggle, #sidebarToggleTop").on("click", function (e) {
    $("body").toggleClass("sidebar-toggled");
    $(".sidebar").toggleClass("toggled");
    if ($(".sidebar").hasClass("toggled")) {
      $(".sidebar .collapse").collapse("hide");
    }
  });

  // Close any open menu accordions when window is resized below 768px
  $(window).resize(function () {
    if ($(window).width() < 768) {
      $(".sidebar .collapse").collapse("hide");
    }
    // Toggle the side navigation when window is resized below 480px
    if ($(window).width() < 480 && !$(".sidebar").hasClass("toggled")) {
      $("body").addClass("sidebar-toggled");
      $(".sidebar").addClass("toggled");
      $(".sidebar .collapse").collapse("hide");
    }
  });

  // Prevent the content wrapper from scrolling when the fixed side navigation hovered over
  $("body.fixed-nav .sidebar").on(
    "mousewheel DOMMouseScroll wheel",
    function (e) {
      if ($(window).width() > 768) {
        var e0 = e.originalEvent,
          delta = e0.wheelDelta || -e0.detail;
        this.scrollTop += (delta < 0 ? 1 : -1) * 30;
        e.preventDefault();
      }
    }
  );

  $("#commentModal").on("show.bs.modal", function (event) {
    var button = $(event.relatedTarget); // Button that triggered the modal
    var recipient = button.data("whatever"); // Extract info from data-* attributes
    // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
    // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
    var modal = $(this);
    modal.find(".commentButton").attr("onclick", "comment(" + recipient + ")");
  });

  // Scroll to top button appear
  $(document).on("scroll", function () {
    var scrollDistance = $(this).scrollTop();
    if (scrollDistance > 100) {
      $(".scroll-to-top").fadeIn();
    } else {
      $(".scroll-to-top").fadeOut();
    }
  });

  // Smooth scrolling using jQuery easing
  $(document).on("click", "a.scroll-to-top", function (e) {
    var $anchor = $(this);
    $("html, body")
      .stop()
      .animate(
        {
          scrollTop: $($anchor.attr("href")).offset().top,
        },
        1000,
        "easeInOutExpo"
      );
    e.preventDefault();
  });

  $(document).on("click", "#searchButton", function () {
    let content = $("#search").val();
    window.location.href = "search.html?address=" + content;
  });
}

(async function ($) {
  "use strict"; // Start of use strict
  $(document).ready(function () {
    $(".topbar").load("common/topbar.html", function () {
      init();
      initWeb3();
    });
  });
})(jQuery); // End of use strict
