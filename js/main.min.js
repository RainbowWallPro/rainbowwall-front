const ipfs = window.IpfsHttpClient.create({
  host: "ipfs.infura.io",
  port: "5001",
});

async function uploadToIpfs(content) {
  let res = await ipfs.add(content);
  console.log(res);
  return res["cid"];
}

async function catFromIpfs(cid) {
  let contents = "";
  let source = ipfs.cat(cid);
  const decoder = new TextDecoder("utf-8");

  for await (const chunk of source) {
    contents += decoder.decode(chunk, {
      stream: true,
    });
  }

  contents += decoder.decode();
  return contents;
}

async function paste() {
  let content = $(".text-content").val();
  let cid = await uploadToIpfs(content);
  let pasteContent = "ipfs://" + cid.toString();
}

function init() {
  // Toggle the side navigation
  $("#sidebarToggle, #sidebarToggleTop").on("click", function (e) {
    $("body").toggleClass("sidebar-toggled");
    $(".sidebar").toggleClass("toggled");
    if ($(".sidebar").hasClass("toggled")) {
      $(".sidebar .collapse").collapse("hide");
    }
  });

  // Close any open menu accordions when window is resized below 768px
  $(window).resize(function () {
    if ($(window).width() < 768) {
      $(".sidebar .collapse").collapse("hide");
    }
    // Toggle the side navigation when window is resized below 480px
    if ($(window).width() < 480 && !$(".sidebar").hasClass("toggled")) {
      $("body").addClass("sidebar-toggled");
      $(".sidebar").addClass("toggled");
      $(".sidebar .collapse").collapse("hide");
    }
  });

  // Prevent the content wrapper from scrolling when the fixed side navigation hovered over
  $("body.fixed-nav .sidebar").on(
    "mousewheel DOMMouseScroll wheel",
    function (e) {
      if ($(window).width() > 768) {
        var e0 = e.originalEvent,
          delta = e0.wheelDelta || -e0.detail;
        this.scrollTop += (delta < 0 ? 1 : -1) * 30;
        e.preventDefault();
      }
    }
  );

  $("#commentModal").on("show.bs.modal", function (event) {
    var button = $(event.relatedTarget); // Button that triggered the modal
    var recipient = button.data("whatever"); // Extract info from data-* attributes
    // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
    // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
    var modal = $(this);
    modal.find(".commentButton").attr("onclick", "comment(" + recipient + ")");
  });

  // Scroll to top button appear
  $(document).on("scroll", function () {
    var scrollDistance = $(this).scrollTop();
    if (scrollDistance > 100) {
      $(".scroll-to-top").fadeIn();
    } else {
      $(".scroll-to-top").fadeOut();
    }
  });

  // Smooth scrolling using jQuery easing
  $(document).on("click", "a.scroll-to-top", function (e) {
    var $anchor = $(this);
    $("html, body")
      .stop()
      .animate(
        {
          scrollTop: $($anchor.attr("href")).offset().top,
        },
        1000,
        "easeInOutExpo"
      );
    e.preventDefault();
  });

  $(document).on("click", "#searchButton", function () {
    let content = $("#search").val();
    window.location.href = "search.html?address=" + content;
  });
}

(async function ($) {
  "use strict"; // Start of use strict
  $(document).ready(function () {
    $(".topbar").load("common/topbar.html", function () {
      $(".modalbar").load("common/modalbar.html", function () {
        init();
      });
    });
  });
})(jQuery); // End of use strict
